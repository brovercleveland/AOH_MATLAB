function [methodinfo,structs,enuminfo,ThunkLibName]=aardvark_matlab
%AARDVARK_MATLAB Create structures to define interfaces found in 'aardvark'.

%This function was generated by loadlibrary.m parser version 1.1.6.32 on Mon Jun 24 10:46:41 2013
%perl options:'aardvark.i -outfile=aardvark_matlab.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int c_aa_find_devices ( int num_devices , u16 * devices ); 
fcns.name{fcnNum}='c_aa_find_devices'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_find_devices_ext ( int num_devices , u16 * devices , int num_ids , u32 * unique_ids ); 
fcns.name{fcnNum}='c_aa_find_devices_ext'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% Aardvark c_aa_open ( int port_number ); 
fcns.name{fcnNum}='c_aa_open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% Aardvark c_aa_open_ext ( int port_number , AardvarkExt * c_aa_ext ); 
fcns.name{fcnNum}='c_aa_open_ext'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'AardvarkExtPtr'};fcnNum=fcnNum+1;
% int c_aa_close ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_port ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_port'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_features ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_features'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% u32 c_aa_unique_id ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_unique_id'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% const char * c_aa_status_string ( int status ); 
fcns.name{fcnNum}='c_aa_status_string'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_log ( Aardvark aardvark , int level , int handle ); 
fcns.name{fcnNum}='c_aa_log'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int c_aa_version ( Aardvark aardvark , AardvarkVersion * version ); 
fcns.name{fcnNum}='c_aa_version'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'AardvarkVersionPtr'};fcnNum=fcnNum+1;
% int c_aa_configure ( Aardvark aardvark , AardvarkConfig config ); 
fcns.name{fcnNum}='c_aa_configure'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'AardvarkConfig'};fcnNum=fcnNum+1;
% int c_aa_target_power ( Aardvark aardvark , u08 power_mask ); 
fcns.name{fcnNum}='c_aa_target_power'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
% u32 c_aa_sleep_ms ( u32 milliseconds ); 
fcns.name{fcnNum}='c_aa_sleep_ms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% int c_aa_async_poll ( Aardvark aardvark , int timeout ); 
fcns.name{fcnNum}='c_aa_async_poll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_free_bus ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_i2c_free_bus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_bitrate ( Aardvark aardvark , int bitrate_khz ); 
fcns.name{fcnNum}='c_aa_i2c_bitrate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_bus_timeout ( Aardvark aardvark , u16 timeout_ms ); 
fcns.name{fcnNum}='c_aa_i2c_bus_timeout'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16'};fcnNum=fcnNum+1;
% int c_aa_i2c_read ( Aardvark aardvark , u16 slave_addr , AardvarkI2cFlags flags , u16 num_bytes , u08 * data_in ); 
fcns.name{fcnNum}='c_aa_i2c_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'AardvarkI2cFlags', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_read_ext ( Aardvark aardvark , u16 slave_addr , AardvarkI2cFlags flags , u16 num_bytes , u08 * data_in , u16 * num_read ); 
fcns.name{fcnNum}='c_aa_i2c_read_ext'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'AardvarkI2cFlags', 'uint16', 'uint8Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_write ( Aardvark aardvark , u16 slave_addr , AardvarkI2cFlags flags , u16 num_bytes , const u08 * data_out ); 
fcns.name{fcnNum}='c_aa_i2c_write'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'AardvarkI2cFlags', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_write_ext ( Aardvark aardvark , u16 slave_addr , AardvarkI2cFlags flags , u16 num_bytes , const u08 * data_out , u16 * num_written ); 
fcns.name{fcnNum}='c_aa_i2c_write_ext'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'AardvarkI2cFlags', 'uint16', 'uint8Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_write_read ( Aardvark aardvark , u16 slave_addr , AardvarkI2cFlags flags , u16 out_num_bytes , const u08 * out_data , u16 * num_written , u16 in_num_bytes , u08 * in_data , u16 * num_read ); 
fcns.name{fcnNum}='c_aa_i2c_write_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'AardvarkI2cFlags', 'uint16', 'uint8Ptr', 'uint16Ptr', 'uint16', 'uint8Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_enable ( Aardvark aardvark , u08 addr , u16 maxTxBytes , u16 maxRxBytes ); 
fcns.name{fcnNum}='c_aa_i2c_slave_enable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_disable ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_i2c_slave_disable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_set_response ( Aardvark aardvark , u08 num_bytes , const u08 * data_out ); 
fcns.name{fcnNum}='c_aa_i2c_slave_set_response'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_write_stats ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_i2c_slave_write_stats'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_read ( Aardvark aardvark , u08 * addr , u16 num_bytes , u08 * data_in ); 
fcns.name{fcnNum}='c_aa_i2c_slave_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_write_stats_ext ( Aardvark aardvark , u16 * num_written ); 
fcns.name{fcnNum}='c_aa_i2c_slave_write_stats_ext'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_slave_read_ext ( Aardvark aardvark , u08 * addr , u16 num_bytes , u08 * data_in , u16 * num_read ); 
fcns.name{fcnNum}='c_aa_i2c_slave_read_ext'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint16', 'uint8Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_monitor_enable ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_i2c_monitor_enable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_monitor_disable ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_i2c_monitor_disable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_i2c_monitor_read ( Aardvark aardvark , u16 num_bytes , u16 * data ); 
fcns.name{fcnNum}='c_aa_i2c_monitor_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
% int c_aa_i2c_pullup ( Aardvark aardvark , u08 pullup_mask ); 
fcns.name{fcnNum}='c_aa_i2c_pullup'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
% int c_aa_spi_bitrate ( Aardvark aardvark , int bitrate_khz ); 
fcns.name{fcnNum}='c_aa_spi_bitrate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int c_aa_spi_configure ( Aardvark aardvark , AardvarkSpiPolarity polarity , AardvarkSpiPhase phase , AardvarkSpiBitorder bitorder ); 
fcns.name{fcnNum}='c_aa_spi_configure'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'AardvarkSpiPolarity', 'AardvarkSpiPhase', 'AardvarkSpiBitorder'};fcnNum=fcnNum+1;
% int c_aa_spi_write ( Aardvark aardvark , u16 out_num_bytes , const u08 * data_out , u16 in_num_bytes , u08 * data_in ); 
fcns.name{fcnNum}='c_aa_spi_write'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'uint8Ptr', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_spi_slave_enable ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_spi_slave_enable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_spi_slave_disable ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_spi_slave_disable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_spi_slave_set_response ( Aardvark aardvark , u08 num_bytes , const u08 * data_out ); 
fcns.name{fcnNum}='c_aa_spi_slave_set_response'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_spi_slave_read ( Aardvark aardvark , u16 num_bytes , u08 * data_in ); 
fcns.name{fcnNum}='c_aa_spi_slave_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% int c_aa_spi_master_ss_polarity ( Aardvark aardvark , AardvarkSpiSSPolarity polarity ); 
fcns.name{fcnNum}='c_aa_spi_master_ss_polarity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'AardvarkSpiSSPolarity'};fcnNum=fcnNum+1;
% int c_aa_gpio_direction ( Aardvark aardvark , u08 direction_mask ); 
fcns.name{fcnNum}='c_aa_gpio_direction'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
% int c_aa_gpio_pullup ( Aardvark aardvark , u08 pullup_mask ); 
fcns.name{fcnNum}='c_aa_gpio_pullup'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
% int c_aa_gpio_get ( Aardvark aardvark ); 
fcns.name{fcnNum}='c_aa_gpio_get'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int c_aa_gpio_set ( Aardvark aardvark , u08 value ); 
fcns.name{fcnNum}='c_aa_gpio_set'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
% int c_aa_gpio_change ( Aardvark aardvark , u16 timeout ); 
fcns.name{fcnNum}='c_aa_gpio_change'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16'};fcnNum=fcnNum+1;
structs.AardvarkVersion.members=struct('software', 'uint16', 'firmware', 'uint16', 'hardware', 'uint16', 'sw_req_by_fw', 'uint16', 'fw_req_by_sw', 'uint16', 'api_req_by_sw', 'uint16');
structs.AardvarkExt.members=struct('version', 'AardvarkVersion', 'features', 'int32');
enuminfo.AardvarkI2cStatus=struct('AA_I2C_STATUS_OK',0,'AA_I2C_STATUS_BUS_ERROR',1,'AA_I2C_STATUS_SLA_ACK',2,'AA_I2C_STATUS_SLA_NACK',3,'AA_I2C_STATUS_DATA_NACK',4,'AA_I2C_STATUS_ARB_LOST',5,'AA_I2C_STATUS_BUS_LOCKED',6,'AA_I2C_STATUS_LAST_DATA_ACK',7);
enuminfo.AardvarkSpiSSPolarity=struct('AA_SPI_SS_ACTIVE_LOW',0,'AA_SPI_SS_ACTIVE_HIGH',1);
enuminfo.AardvarkSpiPolarity=struct('AA_SPI_POL_RISING_FALLING',0,'AA_SPI_POL_FALLING_RISING',1);
enuminfo.AardvarkI2cFlags=struct('AA_I2C_NO_FLAGS',0,'AA_I2C_10_BIT_ADDR',1,'AA_I2C_COMBINED_FMT',2,'AA_I2C_NO_STOP',4,'AA_I2C_SIZED_READ',16,'AA_I2C_SIZED_READ_EXTRA1',32);
enuminfo.AardvarkGpioBits=struct('AA_GPIO_SCL',1,'AA_GPIO_SDA',2,'AA_GPIO_MISO',4,'AA_GPIO_SCK',8,'AA_GPIO_MOSI',16,'AA_GPIO_SS',32);
enuminfo.AardvarkSpiPhase=struct('AA_SPI_PHASE_SAMPLE_SETUP',0,'AA_SPI_PHASE_SETUP_SAMPLE',1);
enuminfo.AardvarkConfig=struct('AA_CONFIG_GPIO_ONLY',0,'AA_CONFIG_SPI_GPIO',1,'AA_CONFIG_GPIO_I2C',2,'AA_CONFIG_SPI_I2C',3,'AA_CONFIG_QUERY',128);
enuminfo.AardvarkStatus=struct('AA_OK',0,'AA_UNABLE_TO_LOAD_LIBRARY',-1,'AA_UNABLE_TO_LOAD_DRIVER',-2,'AA_UNABLE_TO_LOAD_FUNCTION',-3,'AA_INCOMPATIBLE_LIBRARY',-4,'AA_INCOMPATIBLE_DEVICE',-5,'AA_COMMUNICATION_ERROR',-6,'AA_UNABLE_TO_OPEN',-7,'AA_UNABLE_TO_CLOSE',-8,'AA_INVALID_HANDLE',-9,'AA_CONFIG_ERROR',-10,'AA_I2C_NOT_AVAILABLE',-100,'AA_I2C_NOT_ENABLED',-101,'AA_I2C_READ_ERROR',-102,'AA_I2C_WRITE_ERROR',-103,'AA_I2C_SLAVE_BAD_CONFIG',-104,'AA_I2C_SLAVE_READ_ERROR',-105,'AA_I2C_SLAVE_TIMEOUT',-106,'AA_I2C_DROPPED_EXCESS_BYTES',-107,'AA_I2C_BUS_ALREADY_FREE',-108,'AA_SPI_NOT_AVAILABLE',-200,'AA_SPI_NOT_ENABLED',-201,'AA_SPI_WRITE_ERROR',-202,'AA_SPI_SLAVE_READ_ERROR',-203,'AA_SPI_SLAVE_TIMEOUT',-204,'AA_SPI_DROPPED_EXCESS_BYTES',-205,'AA_GPIO_NOT_AVAILABLE',-400,'AA_I2C_MONITOR_NOT_AVAILABLE',-500,'AA_I2C_MONITOR_NOT_ENABLED',-501);
enuminfo.AardvarkSpiBitorder=struct('AA_SPI_BITORDER_MSB',0,'AA_SPI_BITORDER_LSB',1);
methodinfo=fcns;